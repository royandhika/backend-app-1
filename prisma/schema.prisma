// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum BookingStatus {
  pending
  confirmed
  cancelled
}

enum OrderStatus {
  Pending
  Paid
  Cancelled
  Shipped
}

enum FlagAddress {
  Home
  Office
}

model User {
  id             Int      @id @default(autoincrement())
  username       String   @unique @db.VarChar(20)
  password       String   @db.VarChar(255)
  email          String   @unique @db.VarChar(30)
  verified_email Int      @default(0) @db.TinyInt
  phone          String?  @unique @db.VarChar(20)
  verified_phone Int      @default(0) @db.TinyInt
  created_at     DateTime @default(now())
  updated_at     DateTime @default(now()) @updatedAt()

  userprofile   UserProfile?
  useraddress   UserAddress[]
  usersession   UserSession[]
  order         Order[]
  productreview ProductReview[]

  @@map("users")
}

model UserProfile {
  id         Int       @id @default(autoincrement())
  user_id    Int       @unique
  avatar     String?   @db.VarChar(250)
  full_name  String?   @db.VarChar(50)
  birthdate  DateTime? @db.Date
  gender     String?   @db.VarChar(6)
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now()) @updatedAt()

  user User @relation(fields: [user_id], references: [id])

  @@map("user_profiles")
}

model UserAddress {
  id          Int         @id @default(autoincrement())
  user_id     Int
  name        String      @db.VarChar(50)
  phone       String      @db.VarChar(20)
  address     String      @db.VarChar(50)
  postal_code String      @db.VarChar(5)
  district    String      @db.VarChar(20)
  city        String      @db.VarChar(20)
  province    String      @db.VarChar(20)
  notes       String?     @db.VarChar(80)
  is_default  Int         @default(0) @db.TinyInt
  flag        FlagAddress
  created_at  DateTime    @default(now())
  updated_at  DateTime    @default(now()) @updatedAt()

  user  User    @relation(fields: [user_id], references: [id])
  order Order[]

  @@map("user_addresses")
}

model UserSession {
  id            Int      @id @default(autoincrement())
  user_id       Int
  refresh_token String   @db.VarChar(250)
  user_agent    String   @db.VarChar(50)
  ip_address    String   @db.VarChar(20)
  is_active     Int      @db.TinyInt
  created_at    DateTime @default(now())
  updated_at    DateTime @default(now()) @updatedAt()

  user User @relation(fields: [user_id], references: [id])

  @@map("user_sessions")
}

model MasterColour {
  id         Int      @id @default(autoincrement())
  name       String   @db.VarChar(50)
  hex        String   @db.VarChar(12)
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt()

  productvariant ProductVariant[]

  @@map("master_colour")
}

model Product {
  id          Int      @id @default(autoincrement())
  title       String   @db.VarChar(30)
  description String?  @db.Text
  base_price  Decimal  @db.Decimal(12, 2)
  category    String   @db.VarChar(20)
  gender      String   @db.VarChar(20)
  tags        Json
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now()) @updatedAt()

  productvariant ProductVariant[]
  productimage   ProductImage[]
  // productreview  ProductReview[]

  @@map("products")
}

model ProductImage {
  id           Int      @id @default(autoincrement())
  product_id   Int
  url          String   @db.Text
  is_thumbnail Int      @db.TinyInt
  created_at   DateTime @default(now())
  updated_at   DateTime @default(now()) @updatedAt

  product Product @relation(fields: [product_id], references: [id])

  @@map("product_images")
}

model ProductVariant {
  id             Int      @id @default(autoincrement())
  product_id     Int
  colour_id      Int
  size           String   @db.TinyText
  stock          Int      @db.Int
  reserved_stock Int      @db.Int
  price          Decimal  @db.Decimal(12, 2)
  created_at     DateTime @default(now())
  updated_at     DateTime @default(now()) @updatedAt()

  product   Product      @relation(fields: [product_id], references: [id])
  colour    MasterColour @relation(fields: [colour_id], references: [id])
  orderitem OrderItem[]

  @@map("product_variants")
}

model Order {
  id         Int         @id @default(autoincrement())
  address_id Int
  user_id    Int
  status     OrderStatus @default(Pending)
  total      Decimal     @db.Decimal(12, 2)
  created_at DateTime    @default(now())
  updated_at DateTime    @default(now()) @updatedAt

  useraddress UserAddress @relation(fields: [address_id], references: [id])
  user        User        @relation(fields: [user_id], references: [id])
  orderitem   OrderItem[]

  @@map("orders")
}

model OrderItem {
  id                 Int      @id @default(autoincrement())
  order_id           Int
  product_variant_id Int
  quantity           Int
  price              Decimal  @db.Decimal(10, 2)
  created_at         DateTime @default(now())
  updated_at         DateTime @default(now()) @updatedAt

  order          Order          @relation(fields: [order_id], references: [id])
  productvariant ProductVariant @relation(fields: [product_variant_id], references: [id])
  productreview  ProductReview?

  @@map("order_items")
}

model ProductReview {
  id            Int      @id @default(autoincrement())
  order_item_id Int      @unique
  user_id       Int
  // product_id    Int
  rating        Decimal  @db.Decimal(10, 2)
  comment       String?  @db.Text
  created_at    DateTime @default(now())
  updated_at    DateTime @default(now()) @updatedAt

  user      User      @relation(fields: [user_id], references: [id])
  // product   Product   @relation(fields: [product_id], references: [id])
  orderitem OrderItem @relation(fields: [order_item_id], references: [id])

  @@map("product_reviews")
}