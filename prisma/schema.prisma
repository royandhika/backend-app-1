// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  tenant
  host
}

enum BookingStatus {
  pending
  confirmed
  cancelled
}

model User {
  id             String   @id @default(cuid())
  username       String   @unique @db.VarChar(20)
  password       String   @db.VarChar(255)
  email          String   @unique @db.VarChar(30)
  verified_email Int      @default(0) @db.TinyInt
  phone          String   @unique @db.VarChar(20)
  verified_phone Int      @default(0) @db.TinyInt
  created_at     DateTime @default(now()) 
  updated_at     DateTime @updatedAt() 

  profile  Profile?
  session  Session[]
  property Property[]
  booking  Booking[]

  @@map("users")
}

model Profile {
  id         String    @id @default(cuid())
  user_id    String    @unique
  avatar     String?   @db.VarChar(250)
  firstname  String?   @db.VarChar(50)
  lastname   String?   @db.VarChar(50)
  birthdate  DateTime? @db.Date
  gender     Int       @default(0) @db.TinyInt
  city       String?   @db.VarChar(30)
  region     String?   @db.VarChar(50)
  country    String?   @db.VarChar(50)
  role       UserRole  @default(tenant)
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt()

  user User @relation(fields: [user_id], references: [id])

  @@map("profiles")
}

model Session {
  id            String   @id @default(cuid())
  user_id       String
  refresh_token String   @db.VarChar(250)
  user_agent    String   @db.VarChar(50)
  ip_address    String   @db.VarChar(20)
  is_active     Int      @db.TinyInt
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt()

  user User @relation(fields: [user_id], references: [id])

  @@map("sessions")
}

model Property {
  id         String   @id @default(cuid())
  host_id    String
  title      String   @db.VarChar(30)
  desc       String?  @db.Text
  address    String   @db.VarChar(100)
  city       String?  @db.VarChar(30)
  region     String?  @db.VarChar(50)
  country    String?  @db.VarChar(50)
  price      Decimal  @db.Decimal(15, 2)
  max_guests Int      @db.Int
  bedrooms   Int      @db.Int
  bathrooms  Int      @db.Int
  created_at DateTime @default(now()) 
  updated_at DateTime @updatedAt 

  user User @relation(fields: [host_id], references: [id])

  booking Booking[]
  image   Image[]

  @@map("properties")
}

model Booking {
  id          String        @id @default(cuid())
  property_id String
  tenant_id   String
  start_date  DateTime      @db.Date
  end_date    DateTime      @db.Date
  total_price Decimal       @db.Decimal(15, 2)
  status      BookingStatus @default(pending)
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt

  user     User     @relation(fields: [tenant_id], references: [id])
  property Property @relation(fields: [property_id], references: [id])

  review Review?

  @@map("bookings")
}

model Review {
  id         String   @id @default(cuid())
  booking_id String   @unique
  rating     Int      @db.TinyInt
  comment    String?  @db.Text
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  booking Booking @relation(fields: [booking_id], references: [id])

  @@map("reviews")
}

model Image {
  id          String   @id @default(cuid())
  property_id String
  url         String   @db.Text
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  property Property @relation(fields: [property_id], references: [id])

  @@map("images")
}
